@use '_lib' as lib;
@use "sass:math" as math;

$left : math.div(- lib.$input-width, 2) - math.div(lib.$line-width, 2);

.inputContainer {
    display: flex;
    flex-direction: row;
    position: relative;
    align-items: center;
    margin: 0;
    padding: 0;
    width: fit-content;
    height: fit-content;

    & span {
        pointer-events: none;
        width: lib.$input-width;
    }
}

li {
    position: relative;
}

li input {
    background-image: url(./Assets/PlusSquareFill.svg);
    background-position: center;
    background-repeat: no-repeat;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    position: absolute;
    margin: 0;
    font: inherit;
    cursor: pointer;
    height: 1.3em;
    width: lib.$input-width;

    &~.labelContainer {
        & .paddingLabels {
            &::before {
                border-color: transparent;
            }
        }
    }
}

input[type=checkbox] {
    background-image: url(./Assets/PlusSquareFill.svg);

    &:checked {
        background-image: url(./Assets/DashSquareFill.svg);
    }
}

input[type=radio] {

    background-image: url(./Assets/PlusCircleFill.svg);

    &:checked {
        background-image: url(./Assets/DashCircleFill.svg);
    }
}

.nestedContainer {
    margin-left: lib.$input-width;
    transition: max-height 0.1s ease-in, opacity 0.5s ease;
    opacity: 0;
    max-height: 0px;
    overflow: hidden;
}

input:checked {
    &~.nestedContainer {
        opacity: 1;
        max-height: 10000000000px;
        overflow: visible;
    }

    &~.labelContainer {
        & .paddingLabels {
            &::before {
                border-color: lib.$light-gray;
            }
        }
    }
}

.nestedContainerChild {
    position: relative;

    &:not(:last-child) {

        /* vertical lines before nested lists*/
        &::after {
            position: absolute;
            top: 0px;
            left: $left;
            content: '';
            width: lib.$line-width;
            bottom: 0px;
            background-color: lib.$light-gray;
        }
    }
}

.li {
    position: relative;

    /* not last with class li*/
    &:not(:last-child) {

        /* vertical lines before li*/
        &::after {
            position: absolute;
            top: 0px;
            left: $left;
            content: '';
            width: lib.$line-width;
            bottom: 0px;
            background-color: lib.$light-gray;
        }
    }
}

.labelContainer {
    pointer-events: none;

    &.level0 {
        &::before {
            border-width: 0px;
        }
    }

    /* horizontal and vertical lines before nested lists*/
    &::before {
        position: absolute;
        top: 0px;
        left: $left;
        content: '';
        height: calc(0.65em - lib.$line-width/2);
        width: calc(lib.$input-width/2 - 2px);
        border-left: lib.$line-width solid lib.$light-gray;
        border-bottom: lib.$line-width solid lib.$light-gray;
        background-color: transparent;
    }

    .paddingLabels {
        margin-left: lib.$input-width;
        position: relative;

        /* vertical lines before rest of item name*/
        &::before {
            position: absolute;
            top: 0px;
            left: $left;
            content: '';
            bottom: 0px;
            border-left: lib.$line-width solid lib.$light-gray;
            border-bottom: lib.$line-width solid lib.$light-gray;
            background-color: transparent;
        }
    }
}